// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/article_reader.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/dao/article_reader.go -package=daomocks -destination=./internal/repository/dao/mocks/article_reader.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"
	dao "vbook/internal/repository/dao"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleReaderDao is a mock of ArticleReaderDao interface.
type MockArticleReaderDao struct {
	ctrl     *gomock.Controller
	recorder *MockArticleReaderDaoMockRecorder
}

// MockArticleReaderDaoMockRecorder is the mock recorder for MockArticleReaderDao.
type MockArticleReaderDaoMockRecorder struct {
	mock *MockArticleReaderDao
}

// NewMockArticleReaderDao creates a new mock instance.
func NewMockArticleReaderDao(ctrl *gomock.Controller) *MockArticleReaderDao {
	mock := &MockArticleReaderDao{ctrl: ctrl}
	mock.recorder = &MockArticleReaderDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleReaderDao) EXPECT() *MockArticleReaderDaoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockArticleReaderDao) Save(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockArticleReaderDaoMockRecorder) Save(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockArticleReaderDao)(nil).Save), ctx, art)
}

// SaveV2 mocks base method.
func (m *MockArticleReaderDao) SaveV2(ctx context.Context, art dao.PublishedArticle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveV2", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveV2 indicates an expected call of SaveV2.
func (mr *MockArticleReaderDaoMockRecorder) SaveV2(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV2", reflect.TypeOf((*MockArticleReaderDao)(nil).SaveV2), ctx, art)
}
