// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"vbook/interactive/events"
	repository2 "vbook/interactive/repository"
	cache2 "vbook/interactive/repository/cache"
	dao2 "vbook/interactive/repository/dao"
	service2 "vbook/interactive/service"
	"vbook/internal/events/article"
	"vbook/internal/repository"
	"vbook/internal/repository/cache"
	"vbook/internal/repository/dao"
	"vbook/internal/service"
	"vbook/internal/web"
	"vbook/internal/web/jwt"
	"vbook/ioc"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	v := ioc.InitGinMiddleware(cmdable, handler)
	db := ioc.InitDB()
	userDao := dao.NewUserDao(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSmsService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	articleDao := dao.NewArticleDao(db)
	articleCache := cache.NewArticleCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDao, articleCache)
	client := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(client)
	producer := article.NewSaramaSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer)
	interactiveDao := dao2.NewGormInteractiveDao(db)
	interactiveCache := cache2.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository2.NewCacheInteractiveRepository(interactiveDao, interactiveCache)
	interactiveService := service2.NewInteractiveService(interactiveRepository)
	interactiveServiceClient := ioc.InitIntrClient(interactiveService)
	articleHandler := web.NewArticleHandler(articleService, interactiveServiceClient)
	engine := ioc.InitWeb(v, userHandler, articleHandler)
	interactiveReadEventConsumer := events.NewInteractiveReadEventConsumer(interactiveRepository, client)
	v2 := ioc.InitConsumers(interactiveReadEventConsumer)
	rankingService := service.NewBatchRankingService(interactiveServiceClient, articleService)
	rlockClient := ioc.InitRlockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient)
	cron := ioc.InitJobs(rankingJob)
	app := &App{
		server:    engine,
		consumers: v2,
		corn:      cron,
	}
	return app
}

// wire.go:

var interactiveSvcSet = wire.NewSet(dao2.NewGormInteractiveDao, cache2.NewRedisInteractiveCache, repository2.NewCacheInteractiveRepository, service2.NewInteractiveService)

var rankingSvcSet = wire.NewSet(cache.NewRankingRedis, repository.NewRankingRepository, service.NewBatchRankingService)
